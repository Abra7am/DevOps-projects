- name: Install Docker and configure environment
  hosts: _development
  become: true
  vars:
    aws_region: us-east-1
    ecr_registry: #!<account-Id->.dkr.ecr.us-east-1.amazonaws.com
  tasks:
    - name: Update all packages
      ansible.builtin.yum:
        name: '*'
        state: latest
      register: yum_update
    - name: Check update status
      debug:
        msg: "Update all packages: {{ yum_update }}"

    - name: Remove docker if installed from CentOS repo
      ansible.builtin.yum:
        name: '{{ item }}'
        state: removed
      with_items:
        - docker
        - docker-client
        - docker-client-latest
        - docker-common
        - docker-latest
        - docker-latest-logrotate
        - docker-logrotate
        - docker-engine
      register: remove_docker
    - name: Check docker removal status
      debug:
        msg: "Remove docker packages: {{ remove_docker.results }}"

    - name: Install yum utils
      ansible.builtin.yum:
        name: '{{ item }}'
        state: latest
      with_items:
        - yum-utils
        - device-mapper-persistent-data
        - lvm2
        - unzip
      register: yum_utils
    - name: Check yum utils installation status
      debug:
        msg: "Install yum utils: {{ yum_utils.results }}"

    - name: Add Docker repo
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/centos/docker-ce.repo
        dest: /etc/yum.repos.d/docker-ce.repo
      register: add_docker_repo
    - name: Check Docker repo addition status
      debug:
        msg: "Add Docker repo: {{ add_docker_repo }}"

    - name: Install Docker
      ansible.builtin.package:
        name: docker-ce
        state: latest
      register: install_docker
    - name: Check Docker installation status
      debug:
        msg: "Install Docker: {{ install_docker }}"

    - name: Install pip
      ansible.builtin.package:
        name: python3-pip
        state: present
        update_cache: true
      register: install_pip
    - name: Check pip installation status
      debug:
        msg: "Install pip: {{ install_pip }}"

    - name: Check if ec2-user is in the docker group
      command: groups ec2-user
      register: user_groups

    - name: Debug ec2-user group membership
      debug:
        msg: "ec2-user groups: {{ user_groups.stdout }}"

    - name: Add ec2-user to docker group if not already a member
      ansible.builtin.user:
        name: ec2-user
        groups: docker
        append: 'yes'
      when: "'docker' not in user_groups.stdout"
      register: add_user_docker_group

    - name: Check user addition status
      debug:
        msg: "User addition status: {{ add_user_docker_group }}"

    - name: Fail if adding user to docker group failed
      fail:
        msg: "Failed to add user to docker group"
      when: add_user_docker_group.failed

    - name: Start Docker service
      ansible.builtin.service:
        name: docker
        state: started
        enabled: 'yes'
      register: start_docker
    - name: Check Docker service status
      debug:
        msg: "Start Docker service: {{ start_docker }}"

    - name: Install AWS CLI
      ansible.builtin.get_url:
        url: https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
        dest: /home/ec2-user/awscliv2.zip
      register: get_awscli
    - name: Check AWS CLI download status
      debug:
        msg: "Download AWS CLI: {{ get_awscli }}"

    - name: Unzip AWS CLI
      ansible.builtin.unarchive:
        src: /home/ec2-user/awscliv2.zip
        dest: /home/ec2-user
        remote_src: true
      register: unzip_awscli
    - name: Check AWS CLI unzip status
      debug:
        msg: "Unzip AWS CLI: {{ unzip_awscli }}"

    - name: Run the AWS CLI installer
      ansible.builtin.shell: ./aws/install
      register: install_awscli
    - name: Check AWS CLI installation status
      debug:
        msg: "Install AWS CLI: {{ install_awscli.stdout }}"

    - name: Log in to AWS ECR
      ansible.builtin.shell: |
        export PATH=/usr/local/bin:$PATH
        source ~/.bash_profile
        aws ecr get-login-password --region {{ aws_region }} | docker login --username AWS --password-stdin {{ ecr_registry }}
      register: login_ecr
    - name: Check ECR login status
      debug:
        msg: "ECR login: {{ login_ecr.stdout }}"

- name: PostgreSQL Database Config
  hosts: _ansible_postgresql
  become: true
  vars:
    postgre_container: /home/ec2-user/postgresql
    container_name: abraham_postgre
    image_name: #!<account-Id->.dkr.ecr.us-east-1.amazonaws.com/clarusway-repo/todo-app-jenkins:postgr
  tasks:
    - name: Remove existing PostgreSQL container and image
      ansible.builtin.shell: docker ps -q --filter 'name={{ container_name }}' &&
        docker stop {{ container_name }} && docker rm -fv {{ container_name }}
        && docker image rm -f {{ image_name }} || echo 'Not Found'
      register: remove_postgre
    - name: Check removal status of PostgreSQL container and image
      debug:
        msg: "Remove PostgreSQL container and image: {{ remove_postgre.stdout }}"

    - name: Launch PostgreSQL Docker container
      community.docker.docker_container:
        name: '{{ container_name }}'
        image: '{{ image_name }}'
        state: started
        ports:
          - '5432:5432'
        env:
          POSTGRES_PASSWORD: Pp123456789
        volumes:
          - /db-data:/var/lib/postgresql/data
      environment:
        DOCKER_HOST: unix:///var/run/docker.sock
      register: launch_postgre
    - name: Check PostgreSQL container launch status
      debug:
        msg: "Launch PostgreSQL Docker container: {{ launch_postgre }}"

- name: Nodejs Server Configuration
  hosts: _ansible_nodejs
  become: true
  vars:
    container_path: /home/ec2-user/nodejs
    container_name: abraham_nodejs
    image_name: #!<account-Id->.dkr.ecr.us-east-1.amazonaws.com/clarusway-repo/todo-app-jenkins:nodejs
  tasks:
    - name: Remove existing Nodejs container and image
      ansible.builtin.shell: docker ps -q --filter 'name={{ container_name }}' &&
        docker stop {{ container_name }} && docker rm -fv {{ container_name }}
        && docker image rm -f {{ image_name }} || echo 'Not Found'
      register: remove_nodejs
    - name: Check removal status of Nodejs container and image
      debug:
        msg: "Remove Nodejs container and image: {{ remove_nodejs.stdout }}"

    - name: Launch Nodejs Docker container
      community.docker.docker_container:
        name: '{{ container_name }}'
        image: '{{ image_name }}'
        state: started
        ports:
          - '5000:5000'
      environment:
        DOCKER_HOST: unix:///var/run/docker.sock
      register: launch_nodejs
    - name: Check Nodejs container launch status
      debug:
        msg: "Launch Nodejs Docker container: {{ launch_nodejs }}"

- name: React UI Server Configuration
  hosts: _ansible_react
  become: true
  vars:
    container_path: /home/ec2-user/react
    container_name: abraham_react
    image_name: #!<account-Id->.dkr.ecr.us-east-1.amazonaws.com/clarusway-repo/todo-app-jenkins:react
  tasks:
    - name: Remove existing React UI container and image
      ansible.builtin.shell: docker ps -q --filter 'name={{ container_name }}' &&
        docker stop {{ container_name }} && docker rm -fv {{ container_name }}
        && docker image rm -f {{ image_name }} || echo 'Not Found'
      register: remove_react
    - name: Check removal status of React UI container and image
      debug:
        msg: "Remove React UI container and image: {{ remove_react.stdout }}"

    - name: Launch React UI Docker container
      community.docker.docker_container:
        name: '{{ container_name }}'
        image: '{{ image_name }}'
        state: started
        ports:
          - '3000:3000'
      environment:
        DOCKER_HOST: unix:///var/run/docker.sock
      register: launch_react
    - name: Check React UI container launch status
      debug:
        msg: "Launch React UI Docker container: {{ launch_react }}"
